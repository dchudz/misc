return Rcpp::wrap(s);
'
hellofun <- cxxfunction(body = src, includes = '', plugin = 'Rcpp', verbose = FALSE)
cat(hellofun(), '\n')
## add current repository of rstan
Sys.setenv(R_MAKEVARS_USER='')
options(repos = c(getOption("repos"), rstan = "http://wiki.stan.googlecode.com/git/R"))
install.packages('rstan', type = 'source')
library(rstan)
set_cppo("fast")  # for best running speed
schools_code <- '
data {
int<lower=0> J; // number of schools
real y[J]; // estimated treatment effects
real<lower=0> sigma[J]; // s.e. of effect estimates
}
parameters {
real mu;
real<lower=0> tau;
real eta[J];
}
transformed parameters {
real theta[J];
for (j in 1:J)
theta[j] <- mu + tau * eta[j];
}
model {
eta ~ normal(0, 1);
y ~ normal(theta, sigma);
}
'
schools_dat <- list(J = 8,
y = c(28,  8, -3,  7, -1,  1, 18, 12),
sigma = c(15, 10, 16, 11,  9, 11, 10, 18))
fit <- stan(model_code = schools_code, data = schools_dat,
iter = 1000, chains = 4)
fit2 <- stan(fit = fit1, data = schools_dat, iter = 10000, chains = 4)
fit2 <- stan(fit = fit, data = schools_dat, iter = 10000, chains = 4)
print fit2
print(fit2)
plot(fit2)
la <- extract(fit2, permuted = TRUE) # return a list of arrays
?extract
la
names(la)
la$mu
hist(la$mu)
a <- extract(fit2, permuted = FALSE)
a2 <- as.array(fit2)
m <- as.matrix(fit2)
When you click the **Knit HTML** button a web page will be generated that includes both content as well as the output of any embedded R code chunks within the document. You can embed an R code chunk like this: $5+2$
Sys.getenv()
Sys.getenv("windir")
Sys.getenv("SHELL_DATA")
Sys.getenv("SHELL_DATA")
setwd(Sys.getenv("SHELL_PATH"))
setwd("c:")
Sys.getenv("SHELL_PATH")
Sys.getenv("SHELL_DATA")
```{r echo=FALSE, fig.show='animate'}
```{r echo=FALSE, fig.show='animate', dev='jpeg'}
library(animation)
if (!("animation" %in% rownames(installed.packages()))) install.packages("animation")
ani.start
library("animation")
ani.start
ani.start()
dates = seq.Date(as.Date("2009/1/1"),as.Date("2014/1/1"),by="3 months")
for (i in seq_along(dates))  {
plot_wells_date(dates[i])
}
plot_wells_date <- function(cutoff) {
```{r wellsovertime, echo=FALSE, fig.show='animate'}
ani.stop()
library("stan")
library("rstan")
?stan
load("C:/Users/dchud_000/Downloads/results by distance.RData")
rf_results_by_distance
library(ggplot2)
library(ddplay)
library(plyr)
library(reshape2)
melt(rf_results_by_distance)
?melt
?reshape
rf_results_by_distance
melt(rf_results_by_distance)
?melt
melt(rf_results_by_distance)
?reshape
str(rf_results_by_distance)
reshape(rf_results_by_distance, idvar="distanceCutoff", direction="long")
str(rf_results_by_distance)
reshape(rf_results_by_distance, idvar="distanceCutoff", varying=names(rf_results_by_distance)[1:4], vardirection="long")
reshape(rf_results_by_distance, idvar="distanceCutoff", varying=names(rf_results_by_distance)[1:4], direction="long")
melt(rf_results_by_distance, id="distanceCutoff")
resulted_melted <- melt(rf_results_by_distance, id="distanceCutoff")
results_melted <- melt(rf_results_by_distance, id="distanceCutoff")
str(results_melted)
subset(results_melted, variable %in% c("r_rmse", "m_rmse"))
ggplot(data=subset(results_melted, variable %in% c("r_rmse", "m_rmse")))
str(results_melted)
geom_boxplot(mapping=aes(x=distanceCutoff, y=value, color=variable))
ggplot(data=subset(results_melted, variable %in% c("r_rmse", "m_rmse"))) +
geom_boxplot(mapping=aes(x=distanceCutoff, y=value, color=variable))
results_melted2 <- subset(results_melted, variable %in% c("f_rmse", "m_rmse"))
results_melted2
ggplot(data=results_melted2) +
geom_boxplot(mapping=aes(x=distanceCutoff, y=value, color=variable))
ggplot(data=results_melted2) +
geom_boxplot(mapping=aes(x=factor(distanceCutoff), y=value, color=variable))
ggplot(data=results_melted2) +
geom_boxplot(mapping=aes(x=distanceCutoff, y=value, color=variable, group=distanceCutoff))
ggplot(data=results_melted2) +
geom_boxplot(mapping=aes(x=distanceCutoff, y=value, color=variable))
library(sphere, lib.loc="~/Rlibs")
install.packages("sphere")
library(sphere, lib.loc="C:/Users/dchud_000/Downloads/sphere_0.1.tar.gz")
library(sphere, lib.loc="C:/Users/dchud_000/Downloads/")
library(sphere, lib.loc="C:/Users/dchud_000/Downloads/sphere_0.1")
library(sphere, lib.loc="C:/Users/dchud_000/Downloads/sphere_0.1/")
install.packages("C:/Users/dchud_000/Downloads/sphere_0.1.tar.gz", repos = NULL, type = "source")
library(sphere, lib.loc="C:/Users/dchud_000/Downloads/sphere_0.1/")
library(sphere, lib.loc="C:/Users/dchud_000/Downloads/")
library(randomForest)
?partialPlot
data(iris)
set.seed(543)
iris.rf <- randomForest(Species~., iris)
partialPlot(iris.rf, iris, Petal.Width, "versicolor")
partialPlot(iris.rf, iris, "Petal.Width", "versicolor")
source('~/.active-rstudio-document', echo=TRUE)
a=()
myPartialPlotFunction  <- function(forest, dataset, variable) {
partialPlot(forest, dataset, variable)
}
myPartialPlotFunction(iris.rf, iris, Petal.Width, "versicolor")
myPartialPlotFunction(iris.rf, iris, Petal.Width)
myPartialPlotFunction(iris.rf, iris, Petal.Width)
iris
Sepal.Length
myPartialPlotFunction  <- function(forest, dataset, variable) {
partialPlot(iris.rf, iris, variable)
}
myPartialPlotFunction(Petal.Width)
myPartialPlotFunction(Petal.Width)
myPartialPlotFunction("Petal.Width")
myPartialPlotFunction  <- function(forest, dataset, variable) {
partialPlot(iris.rf, iris, get("variable")
}
myPartialPlotFunction  <- function(forest, dataset, variable) {
partialPlot(iris.rf, iris, get("variable"))
}
myPartialPlotFunction(Petal.Width)
?get
myPartialPlotFunction  <- function(forest, dataset, variable) {
I_REALLY_SHOULDNT_HAVE_TO_MAKE_THIS_GLOBAL <<- variable
partialPlot(iris.rf, iris, get("variable"))
}
myPartialPlotFunction(Petal.Width)
myPartialPlotFunction  <- function(forest, dataset, variable) {
I_REALLY_SHOULDNT_HAVE_TO_MAKE_THIS_GLOBAL <<- variable
partialPlot(iris.rf, iris, get("I_REALLY_SHOULDNT_HAVE_TO_MAKE_THIS_GLOBAL"))
}
myPartialPlotFunction(Petal.Width)
myPartialPlotFunction  <- function(forest, dataset, variable) {
partialPlot(iris.rf, iris, get("variable"))
}
myPartialPlotFunction("Petal.Width")
myPartialPlotFunction  <- function(forest, dataset, variable) {
I_REALLY_SHOULDNT_HAVE_TO_MAKE_THIS_GLOBAL <<- variable
partialPlot(iris.rf, iris, get("I_REALLY_SHOULDNT_HAVE_TO_MAKE_THIS_GLOBAL"))
}
myPartialPlotFunction("Petal.Width")
myPartialPlotFunction  <- function(variable) {
I_REALLY_SHOULDNT_HAVE_TO_MAKE_THIS_GLOBAL <<- variable
partialPlot(iris.rf, iris, get("I_REALLY_SHOULDNT_HAVE_TO_MAKE_THIS_GLOBAL"))
}
myPartialPlotFunction("Petal.Width")
partialPlot(iris.rf, iris, Petal.Width, "versicolor")
partialPlot(iris.rf, iris, Petal.Width, "versicolor")
partialPlot(iris.rf, iris, Petal.Width, "versicolor")
iris.rf <- randomForest(Species~., iris)
partialPlot(iris.rf, iris, Petal.Width, "versicolor")
iris.rf <- randomForest(Species~., iris)
partialPlot(iris.rf, iris, Petal.Width, "versicolor")
myPartialPlotFunction("Petal.Width")
partialPlot(iris.rf, iris, Petal.Width, "versicolor")
partialPlot(iris.rf, iris, Petal.Width, "versicolor")
partialPlot(iris.rf, iris, Petal.Width, "versicolor")
myPartialPlotFunction  <- function(variable) {
I_REALLY_SHOULDNT_HAVE_TO_MAKE_THIS_GLOBAL <<- variable
partialPlot(iris.rf, iris, get("I_REALLY_SHOULDNT_HAVE_TO_MAKE_THIS_GLOBAL"))
}
myPartialPlotFunction("Petal.Width")
myPartialPlotFunction("Petal.Width")
partialPlot(iris.rf, iris, Petal.Width, "versicolor")
partialPlot(iris.rf, iris, Petal.Width)
partialPlot(iris.rf, iris, Petal.Width)
?partialPlot
iris.rf <- randomForest(Species~., iris, "versicolor")
library(randomForest)
data(iris)
iris.rf <- randomForest(Species~., iris)
partialPlot(iris.rf, iris, Petal.Width, "versicolor")
?partialPlot
partialPlot(iris.rf, iris, Petal.Width, "versicolor")
myPartialPlotFunction  <- function(variable) {
I_REALLY_SHOULDNT_HAVE_TO_MAKE_THIS_GLOBAL <<- variable
partialPlot(iris.rf, iris, get("I_REALLY_SHOULDNT_HAVE_TO_MAKE_THIS_GLOBAL"), "versicolor")
}
myPartialPlotFunction("Petal.Width")
?partialPlot
ozone.rf <- randomForest(Ozone ~ ., airquality, importance=TRUE)
airquality <- na.omit(airquality)
ozone.rf <- randomForest(Ozone ~ ., airquality, importance=TRUE)
importance(ozone.rf)
partialPlot(ozone.rf, airquality, Temp)
partialPlot(ozone.rf, airquality, "Temp")
myPartialPlotFunction("Temp")
myPartialPlotFunction  <- function(variable) {
partialPlot(ozone.rf, airquality, variable)
}
myPartialPlotFunction("Temp")
myPartialPlotFunction  <- function(variable) {
I_REALLY_SHOULDNT_HAVE_TO_MAKE_THIS_GLOBAL <<- variable
partialPlot(ozone.rf, airquality, get("I_REALLY_SHOULDNT_HAVE_TO_MAKE_THIS_GLOBAL"))
}
myPartialPlotFunction("Petal.Width")
myPartialPlotFunction  <- function(variable) {
I_REALLY_SHOULDNT_HAVE_TO_MAKE_THIS_GLOBAL <<- variable
partialPlot(ozone.rf, airquality, get("I_REALLY_SHOULDNT_HAVE_TO_MAKE_THIS_GLOBAL"))
}
myPartialPlotFunction("Temp")
myPartialPlotFunction  <- function(variable) {
partialPlot(ozone.rf, airquality, get("variable")
}
myPartialPlotFunction  <- function(variable) {
partialPlot(ozone.rf, airquality, get("variable"))
}
myPartialPlotFunction("Temp")
f <- function(){
a <- 5
eval("a+2")
}
f()}
f()
eval(a+2)
f <- function(){
a <- 5
eval(a+2)
f()
f()
}
f <- function(){
a <- 5
eval(a+2)
}
f()
?eval
?eval
evalq("2+2")
evalq("2")
f1 <- function(){
a <- 5
eval(parse(text="a+2")
}
f2 <- function(){
a <- 5
eval(parse(text="a+2"))
}
a
f2()
a=1
f1 <- function(){
a <- 5
eval(a+2)
}
f1()
f2 <- function(){
a <- 5
eval(parse(text="a+2"))
}
f2()
$$p(mu_k=x | )$$
sample_from_restricted_uniform <- function(N) {
data.frame(mu <- sort(runif(N)), N=N)
}
sample_from_restricted_uniform(4)
sample_from_restricted_uniform <- function(N) {
data.frame(mu = sort(runif(N)), N=N)
}
sample_from_restricted_uniform(4)
k_samples_from_restricted_uniform <- function(N, k)
ldply(1:k, function(k) {
samples <- sample_from_restricted_uniform(N)
samples$sample_num = k
})
k_samples_from_restricted_uniform(4,3)
require(plyr)
k_samples_from_restricted_uniform <- function(N, k)
ldply(1:k, function(k) {
samples <- sample_from_restricted_uniform(N)
samples$sample_num = k
})
k_samples_from_restricted_uniform(4,3)
k_samples_from_restricted_uniform <- function(N, k)
ldply(1:k, function(k) {
samples <- sample_from_restricted_uniform(N)
samples$sample_num = k
samples
})
k_samples_from_restricted_uniform(4,3)
samples <- ldply(c(5,10,50,100,1000), function(N) k_samples_from_restricted_uniform(N, 10))
require(ggplot2)
sample_from_restricted_uniform <- function(N) {
data.frame(mu = sort(runif(N)), N=N, t=(1:N)/N)
}
k_samples_from_restricted_uniform <- function(N, k)
ldply(1:k, function(k) {
samples <- sample_from_restricted_uniform(N)
samples$sample_num = k
samples
})
sample_from_restricted_uniform(4)
samples <- ldply(c(5,10,50,100,1000), function(N) k_samples_from_restricted_uniform(N, 10))
ggplot(data=samples) + geom_line(x=t, y=mu, color=N, group=paste(N,sample_num))
ggplot(data=samples) + geom_line(mapping=aes(x=t, y=mu, color=N, group=paste(N,sample_num)))
ggplot(data=samples) + geom_line(mapping=aes(x=t, y=mu, color=factor(N), group=paste(N,sample_num)))
sample_from_restricted_uniform <- function(N) {
data.frame(mu = c(0,sort(runif(N))), N=N, t=(0:N)/N)
}
k_samples_from_restricted_uniform <- function(N, k)
ldply(1:k, function(k) {
samples <- sample_from_restricted_uniform(N)
samples$sample_num = k
samples
})
samples <- ldply(c(5,10,50,100,1000), function(N) k_samples_from_restricted_uniform(N, 10))
ggplot(data=samples) + geom_line(mapping=aes(x=t, y=mu, color=factor(N), group=paste(N,sample_num)))
sample_from_restricted_uniform <- function(N) {
data.frame(mu = c(0,sort(runif(N))), N=as.character(N), t=(0:N)/N)
}
k_samples_from_restricted_uniform <- function(N, k)
ldply(1:k, function(k) {
samples <- sample_from_restricted_uniform(N)
samples$sample_num = k
samples
})
samples <- ldply(c(5,10,50,100,1000), function(N) k_samples_from_restricted_uniform(N, 10))
ggplot(data=samples) + geom_line(mapping=aes(x=t, y=mu, color=factor(N), group=paste(N,sample_num)))
samples <- ldply(c(5,10,50,100,1000), function(N) k_samples_from_restricted_uniform(N, 10))
ggplot(data=samples) + geom_line(mapping=aes(x=t, y=mu, color=N, group=paste(N,sample_num)))
sample_from_restricted_uniform <- function(N) {
data.frame(mu = c(0,sort(runif(N))), N=N, t=(0:N)/N)
}
k_samples_from_restricted_uniform <- function(N, k)
ldply(1:k, function(k) {
samples <- sample_from_restricted_uniform(N)
samples$sample_num = k
samples
})
samples <- ldply(c(5,10,50,100,1000), function(N) k_samples_from_restricted_uniform(N, 10))
samples <- ldply(c(5,10,50,100,1000), function(N) k_samples_from_restricted_uniform(N, 10))
ggplot(data=samples) + geom_line(mapping=aes(x=t, y=mu, color=N, group=paste(N,sample_num), alpha=1/N))
samples <- ldply(c(5,10,50,100,1000), function(N) k_samples_from_restricted_uniform(N, 10))
ggplot(data=samples) + geom_line(mapping=aes(x=t, y=mu, color=factpr(N), group=paste(N,sample_num), alpha=1/N))
ggplot(data=samples) + geom_line(mapping=aes(x=t, y=mu, color=factor(N), group=paste(N,sample_num), alpha=1/N))
ggplot(data=samples) + geom_line(mapping=aes(x=t, y=mu, color=factor(N), group=paste(N,sample_num), alpha=10/N))
ggplot(data=samples) + geom_line(mapping=aes(x=t, y=mu, color=factor(N), group=paste(N,sample_num), alpha=1/log(N)))
ggplot(data=samples) + geom_line(mapping=aes(x=t, y=mu, color=factor(N), group=paste(N,sample_num), alpha=1/log(log(N))))
ggplot(data=samples) + geom_line(mapping=aes(x=t, y=mu, color=factor(N), group=paste(N,sample_num)))
sample_from_restricted_uniform <- function(N) {
data.frame(mu = c(0,sort(runif(N-1)),1), N=N, t=(0:N)/N)
}
k_samples_from_restricted_uniform <- function(N, k)
ldply(1:k, function(k) {
samples <- sample_from_restricted_uniform(N)
samples$sample_num = k
samples
})
samples <- ldply(c(5,10,50,100,1000), function(N) k_samples_from_restricted_uniform(N, 10))
ggplot(data=samples) + geom_line(mapping=aes(x=t, y=mu, color=factor(N), group=paste(N,sample_num)))
samples <- ldply(c(10,100,1000), function(N) k_samples_from_restricted_uniform(N, 10))
ggplot(data=samples) + geom_line(mapping=aes(x=t, y=mu, color=factor(N), group=paste(N,sample_num)))
samples <- ldply(c(10,100,1000), function(N) k_samples_from_restricted_uniform(N, 20))
ggplot(data=samples) + geom_line(mapping=aes(x=t, y=mu, color=factor(N), group=paste(N,sample_num)))
ggplot(data=transform(samples, N=factor(N)) + geom_line(mapping=aes(x=t, y=mu, color=N, group=paste(N,sample_num)))
ggplot(data=transform(samples, N=factor(N))) + geom_line(mapping=aes(x=t, y=mu, color=N, group=paste(N,sample_num)))
ggplot(data=transform(samples, N=factor(N))) + geom_line(mapping=aes(x=t, y=mu, color=N, group=paste(N,sample_num)))
samples <- ldply(c(10,100,1000),
function(N) k_samples_from_restricted_uniform(N, 20, generate_data_including_hyperparameters))
sample_from_restricted_uniform <- function(N) {
data.frame(mu = c(0,sort(runif(N-1)),1), N=N, t=(0:N)/N)
}
k_samples_from_restricted_uniform <- function(N, k, sample_function)
ldply(1:k, function(k) {
samples <- sample_function(N)
samples$sample_num = k
samples
})
samples <- ldply(c(10,100,1000), function(N) k_samples_from_restricted_uniform(N, 20, sample_from_restricted_uniform))
ggplot(data=transform(samples, N=factor(N))) + geom_line(mapping=aes(x=t, y=mu, color=N, group=paste(N,sample_num)))
k_samples_from_restricted_uniform(4,3)
k_samples_N_internals <- function(N, k, sample_function)
ldply(1:k, function(k) {
samples <- sample_function(N)
samples$sample_num = k
samples
})
samples <- ldply(c(10,100,1000), function(N) k_samples_N_internals(N, 20, sample_from_restricted_uniform))
samples <- ldply(c(10,100,1000), function(N) k_samples_N_internals(N, 20, generate_data_including_hyperparameters))
source("data generation function.R")
source("chi_square_jumps_hierarchical.R")
setwd(Sys.getenv("GITHUB_PATH"))
setwd("./misc/stan models/increasing by chi square increments/")
source("data generation function.R")
source("chi_square_jumps_hierarchical.R")
samples <- ldply(c(10,100,1000), function(N) k_samples_N_internals(N, 20, generate_data_including_hyperparameters))
ggplot(data=transform(samples, N=factor(N))) + geom_line(mapping=aes(x=t, y=mu, color=N, group=paste(N,sample_num)))
k_samples_N_internals(10, 2, generate_data_including_hyperparameters)
samples <- ldply(c(10,100,1000), function(N) k_samples_N_internals(N, 20, generate_data_including_hyperparameters))
ggplot(data=transform(samples, N=factor(N))) + geom_line(mapping=aes(x=t, y=mu, color=N, group=paste(N,sample_num)))
samples
View(samples)
sample_from_restricted_uniform <- function(N) {
data.frame(mu = c(0,sort(runif(N-1)),1), t=(0:N)/N)
}
k_samples_N_internals <- function(N, k, sample_function)
ldply(1:k, function(k) {
samples <- sample_function(N)
samples$sample_num = k
samples$N = N
})
samples <- ldply(c(10,100,1000), function(N) k_samples_N_internals(N, 20, sample_from_restricted_uniform))
ggplot(data=transform(samples, N=factor(N))) + geom_line(mapping=aes(x=t, y=mu, color=N, group=paste(N,sample_num)))
samples <- ldply(c(10,100,1000), function(N) k_samples_N_internals(N, 20, sample_from_restricted_uniform))
k_samples_N_internals <- function(N, k, sample_function)
ldply(1:k, function(k) {
samples <- sample_function(N)
samples$sample_num = k
samples$N = N
samples
})
samples <- ldply(c(10,100,1000), function(N) k_samples_N_internals(N, 20, sample_from_restricted_uniform))
ggplot(data=transform(samples, N=factor(N))) + geom_line(mapping=aes(x=t, y=mu, color=N, group=paste(N,sample_num)))
k_samples_N_internals(10, 2, generate_data_including_hyperparameters)
samples <- ldply(c(10,100,1000), function(N) k_samples_N_internals(N, 20, generate_data_including_hyperparameters))
ggplot(data=transform(samples, N=factor(N))) + geom_line(mapping=aes(x=t, y=mu, color=N, group=paste(N,sample_num)))
last_plot() + coord_cartesian(ylim=c(0,1000))
ggplot(data=transform(samples, N=factor(N))) + geom_line(mapping=aes(x=t, y=mu, color=N, group=paste(N,sample_num)))
last_plot() + coord_cartesian(ylim=c(0,1000))
samples <- ldply(c(10,100,1000),
function(N) k_samples_N_internals(N, 20,
function(N) generate_data_mean_var(500, 400, N, 1)))
ggplot(data=transform(samples, N=factor(N))) + geom_line(mapping=aes(x=t, y=mu, color=N, group=paste(N,sample_num)))
samples <- ldply(c(10,100,1000),
function(N) k_samples_N_internals(N, 20,
function(N) generate_data_mean_var(500, 10, N, 1)))
ggplot(data=transform(samples, N=factor(N))) + geom_line(mapping=aes(x=t, y=mu, color=N, group=paste(N,sample_num)))
samples <- ldply(c(10,100,1000),
function(N) k_samples_N_internals(N, 20,
function(N) generate_data_mean_var(500, 490, N, 1)))
ggplot(data=transform(samples, N=factor(N))) + geom_line(mapping=aes(x=t, y=mu, color=N, group=paste(N,sample_num)))
samples <- ldply(c(10,100,1000),
function(N) k_samples_N_internals(N, 20,
function(N) generate_data_mean_var(500, (400**2), N, 1)))
ggplot(data=transform(samples, N=factor(N))) + geom_line(mapping=aes(x=t, y=mu, color=N, group=paste(N,sample_num)))
samples <- ldply(c(10,100,1000),
function(N) k_samples_N_internals(N, 20,
function(N) generate_data_mean_var(500, (100**2), N, 1)))
ggplot(data=transform(samples, N=factor(N))) + geom_line(mapping=aes(x=t, y=mu, color=N, group=paste(N,sample_num)))
samples <- ldply(c(10,100,1000),
function(N) k_samples_N_internals(N, 20,
function(N) generate_data_mean_var(500, (10**2), N, 1)))
ggplot(data=transform(samples, N=factor(N))) + geom_line(mapping=aes(x=t, y=mu, color=N, group=paste(N,sample_num)))
samples <- ldply(c(10,100,1000),
function(N) k_samples_N_internals(N, 20,
function(N) generate_data_mean_var(500, (100**2), N, 1)))
ggplot(data=transform(samples, N=factor(N))) + geom_line(mapping=aes(x=t, y=mu, color=N, group=paste(N,sample_num)))
samples <- ldply(c(10,100,1000),
function(N) k_samples_N_internals(N, 20,
function(N) generate_data_mean_var(500, (400**2), N, 1)))
ggplot(data=transform(samples, N=factor(N))) + geom_line(mapping=aes(x=t, y=mu, color=N, group=paste(N,sample_num)))
str(samples)
?duplicated
samplesZero <- samples[!duplicated(samples[,c("sample_num","N")])
samplesZero <- samples[!duplicated(samples[,c("sample_num","N")])]
samplesZero <- samples[!duplicated(samples[,c("sample_num","N")]),]
samplesZero
samplesZero[,c("mu","y","t")] <- 0
ggplot(data=transform(samples, N=factor(N))) + geom_line(mapping=aes(x=t, y=mu, color=N, group=paste(N,sample_num)))
samples <- ldply(c(10,100,1000),
ggplot(data=transform(rbind(samples,samplesZero), N=factor(N))) +
geom_line(mapping=aes(x=t, y=mu, color=N, group=paste(N,sample_num)))
addZerosToSamples <- function(samples) {
samplesZero <- samples[!duplicated(samples[,c("sample_num","N")]),]
samplesZero[,c("mu","y","t")] <- 0
rbind(samples,samplesZero)
}
ggplot(data=transform(addZerosToSamples(samples)), N=factor(N))) +
ggplot(data=transform(addZerosToSamples(samples), N=factor(N))) +
geom_line(mapping=aes(x=t, y=mu, color=N, group=paste(N,sample_num)))
samples <- ldply(c(10,100,1000),
function(N) k_samples_N_internals(N, 20,
function(N) generate_data_mean_var(500, (100**2), N, 1)))
ggplot(data=transform(addZerosToSamples(samples), N=factor(N))) + geom_line(mapping=aes(x=t, y=mu, color=N, group=paste(N,sample_num)))
set.seed(38738)
samples <- ldply(c(10,100,1000), function(N) k_samples_N_internals(N, 20, generate_data_including_hyperparameters))
ggplot(data=transform(samples, N=factor(N))) + geom_line(mapping=aes(x=t, y=mu, color=N, group=paste(N,sample_num)))
ggplot(data=transform(addZerosToSamples(samples), N=factor(N))) + geom_line(mapping=aes(x=t, y=mu, color=N, group=paste(N,sample_num)))
