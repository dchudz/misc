geom_line(mapping=aes(x=t, y=theta, color=N, group=paste(N,sample_num))) +
ggtitle("prior for thetas, sampling hyperparameters") +
coord_cartesian(ylim=c(0,13))
set.seed(1)
fake_data <- generate_data_including_hyperparameters(50)
plot_fake_data(fake_data)
set.seed(1)
fake_data <- generate_data_including_hyperparameters(50)
set.seed(387)
samples3 <- ldply(c(10,100,1000), function(N) k_samples_N_internals(N, 20, generate_data_including_hyperparameters))
library("ggplot2")
# "generate_data" generates fake data according to this model (which is the same as the stan model I fit it to):
#
# For i in 1:N
#
#   theta_i ~ theta_{i-1} + s*chi_square(k_0/N)   (theta_0 = 0)
#   y_y ~ N(theta_i, sqrt(sigma_y_sq*N))
#
generate_data <- function(k_0, s, N, sigma_y) {
theta <- s*cumsum(rchisq(N, k_0/N))
y <- theta + rnorm(N, sd=sigma_y*sqrt(N))
t <- seq(1/N,1,1/N)
data.frame(t=t, theta=theta, y=y)
}
# "generate_data_including_hyperparameters":
#   samples the hyperparameters and then uses generate_data_mean_var to generate
#   data from the distributions determined by those hyperparameters
generate_data_including_hyperparameters <- function(N) {
k_0 <- 10 + runif(1)*90
s  <- runif(1)*2
sigma_y <- runif(1)*1
fake_data <- generate_data(k_0, s, N, sigma_y)
fake_data$s <- s
fake_data$k_0 <- k_0
fake_data$sigma_y = sigma_y
fake_data
}
#plotting the data
plot_fake_data <- function(fake_data) {
fake_data_plot <- ggplot(data=fake_data) + scale_color_discrete("") +
geom_line(mapping=aes(x=t,y=theta, color="theta")) +
geom_point(mapping=aes(x=t,y=y,color="y"))
fake_data_plot
}
set.seed(387)
samples3 <- ldply(c(10,100,1000), function(N) k_samples_N_internals(N, 20, generate_data_including_hyperparameters))
ggplot(data=transform(addZerosToSamples(samples3), N=factor(N))) +
geom_line(mapping=aes(x=t, y=theta, color=N, group=paste(N,sample_num))) +
ggtitle("prior for thetas, sampling hyperparameters") +
coord_cartesian(ylim=c(0,13))
ggplot(data=transform(addZerosToSamples(samples3), N=factor(N))) +
geom_line(mapping=aes(x=t, y=theta, color=N, group=paste(N,sample_num))) +
ggtitle("prior for thetas, sampling hyperparameters")
k_0 <- 60
s <- 1
samples <- ldply(c(10,100,1000),
function(N) k_samples_N_internals(N, 20, function(N) generate_data(k_0, s, N, 1)))
ggplot(data=transform(addZerosToSamples(samples), N=factor(N))) +
geom_line(mapping=aes(x=t, y=theta, color=N, group=paste(N,sample_num))) +
ggtitle(paste("prior for thetas, mu_N =", mu_N, ", sigma_N =", sigma_N))
k_0 <- 50
s <- 1
samples <- ldply(c(10,100,1000),
function(N) k_samples_N_internals(N, 20, function(N) generate_data(k_0, s, N, 1)))
ggplot(data=transform(addZerosToSamples(samples), N=factor(N))) +
geom_line(mapping=aes(x=t, y=theta, color=N, group=paste(N,sample_num))) +
ggtitle(paste("prior for thetas, mu_N =", mu_N, ", sigma_N =", sigma_N))
generate_data_including_hyperparameters <- function(N) {
k_0 <- 10 + runif(1)*40
s  <- runif(1)*2
sigma_y <- runif(1)*1
fake_data <- generate_data(k_0, s, N, sigma_y)
fake_data$s <- s
fake_data$k_0 <- k_0
fake_data$sigma_y = sigma_y
fake_data
}
set.seed(387)
samples3 <- ldply(c(10,100,1000), function(N) k_samples_N_internals(N, 20, generate_data_including_hyperparameters))
ggplot(data=transform(addZerosToSamples(samples3), N=factor(N))) +
geom_line(mapping=aes(x=t, y=theta, color=N, group=paste(N,sample_num))) +
ggtitle("prior for thetas, sampling hyperparameters")
coord_cartesian(ylim=c(0,13))
ggplot(data=transform(addZerosToSamples(samples3), N=factor(N))) +
geom_line(mapping=aes(x=t, y=theta, color=N, group=paste(N,sample_num))) +
ggtitle("prior for thetas, sampling hyperparameters") +
coord_cartesian(ylim=c(0,50))
set.seed(1)
fake_data <- generate_data_including_hyperparameters(50)
plot_fake_data(fake_data)
fake_data <- generate_data_including_hyperparameters(50)
plot_fake_data(fake_data)
fake_data <- generate_data_including_hyperparameters(50)
plot_fake_data(fake_data)
fake_data <- generate_data_including_hyperparameters(50)
plot_fake_data(fake_data)
set.seed(1)
fake_data <- generate_data_including_hyperparameters(50)
plot_fake_data(fake_data)
set.seed(23)
fake_data <- generate_data_including_hyperparameters(50)
plot_fake_data(fake_data)
set.seed(234)
fake_data <- generate_data_including_hyperparameters(50)
plot_fake_data(fake_data)
set.seed(322)
fake_data <- generate_data_including_hyperparameters(50)
plot_fake_data(fake_data)
fit1 <- stan("chi_square_jumps hierarchical.stan",
data = list(N=50, y=fake_data$y), iter = 2000, chains = 4)
print(fit1)
fake_data <- generate_data(30,1,50,.5)
plot_fake_data(fake_data)
fit1 <- stan("chi_square_jumps hierarchical.stan",
data = list(N=50, y=fake_data$y), iter = 2000, chains = 4)
print(fit1)
fit2 <- stan(fit=fit1, data = list(N=50, y=fake_data$y), iter = 10000, chains = 4)
print(fit2)
fake_data$posterior_theta_means <- get_posterior_mean(fit2,pars="theta")[,5]
plot_fake_data(fake_data)+
geom_line(data=fake_data, aes(x=t,y=posterior_theta_means, color="posterior theta means"))
print(fits1$plot_no_model + ggtitle("one sample: theta, y, aggregated y"))
plot_fake_data(fake_data)+
geom_line(data=fake_data, aes(x=t,y=posterior_theta_means, color="posterior theta means"))
print(fits1$plot + ggtitle("fit to original and aggregated y's"))
plot_samples(fits1, 20)
fit  <- list(fit=fit2, fake_data=fake_data)
fit_samples <- samples_from_fit_to_DF(fit$fit, "theta", n)
fit_samples$t <- fit$fake_data$t  #using R's vector recycling feels dirty
fake_data <- fit$fake_data
fake_data$model = "truth"
fit_samples <- samples_from_fit_to_DF(fit$fit, "theta", n)
fit_samples$t <- fit$fake_data$t  #using R's vector recycling feels dirty
fit_samples <- samples_from_fit_to_DF(fit$fit, "theta", n)
fit  <- list(fit=fit2, fake_data=fake_data)
fit_samples <- samples_from_fit_to_DF(fit$fit, "theta", n)
n=20
fit_samples <- samples_from_fit_to_DF(fit$fit, "theta", n)
fit_samples$t <- fit$fake_data$t  #using R's vector recycling feels dirty
fake_data <- fit$fake_data
fake_data$model = "truth"
fake_data$sample_num = "0"
fake_data <- fake_data[,names(fit_samples)]
sampleDFs$model <- ifelse(sampleDFs$model=="fit$fit", "original data", "aggregated data")
fake_data
str(fake_data)
sampleDFs <- rbind(sampleDFs, fake_data)
str(fit_samples)
str(fake_data)
fit_samples$model = "model"
fake_data <- fit$fake_data
fake_data$model = "truth"
fake_data$sample_num = "0"
fake_data <- fake_data[,names(fit_samples)]
plot_samples <- ggplot(data=rbind(sampleDFs, fake_data)) +
geom_line(mapping=aes(x=t, y=theta, group=sample_num,color=model,
size=ifelse(model=="truth","truth","models" )), alpha=1) +
ggtitle("samples from posterior theta") +
scale_size_discrete("", range=c(.5,2))
plot_samples <- ggplot(data=rbind(fit_samples, fake_data)) +
geom_line(mapping=aes(x=t, y=theta, group=sample_num,color=model,
size=ifelse(model=="truth","truth","models" )), alpha=1) +
ggtitle("samples from posterior theta") +
scale_size_discrete("", range=c(.5,2))
plot_samples
plot_samples <- ggplot(data=rbind(fit_samples, fake_data)) +
geom_line(mapping=aes(x=t, y=theta, group=sample_num,color=model,
size=ifelse(model=="truth","truth","models" )), alpha=1) +
ggtitle("samples from posterior theta") +
scale_size_discrete("", range=c(.5,2), legend=FALSE)
plot_samples
plot_samples <- ggplot(data=rbind(fit_samples, fake_data)) +
geom_line(mapping=aes(x=t, y=theta, group=sample_num,color=model,
size=ifelse(model=="truth","truth","models" )), alpha=1) +
ggtitle("samples from posterior theta") +
scale_size_discrete("", range=c(.5,2), guide="none")
plot_samples
plot_samples <- function(fit, n) {
fit_samples <- samples_from_fit_to_DF(fit$fit, "theta", n)
fit_samples$t <- fit$fake_data$t  #using R's vector recycling feels dirty
fit_samples$model = "model"
fake_data <- fit$fake_data
fake_data$model = "truth"
fake_data$sample_num = "0"
fake_data <- fake_data[,names(fit_samples)]
sampleDFs$model <- ifelse(sampleDFs$model=="fit$fit", "original data", "aggregated data")
plot_samples <- ggplot(data=rbind(fit_samples, fake_data)) +
geom_line(mapping=aes(x=t, y=theta, group=sample_num,color=model,
size=ifelse(model=="truth","truth","models" )), alpha=1) +
ggtitle("samples from posterior theta") +
scale_size_discrete("", range=c(.5,2), guide="none")
plot_samples
}
plot_samples(list(fit=fit2, fake_data=fake_data), 20)
plot_samples <- function(fit, n) {
fit_samples <- samples_from_fit_to_DF(fit$fit, "theta", n)
fit_samples$t <- fit$fake_data$t  #using R's vector recycling feels dirty
fit_samples$model = "model"
fake_data <- fit$fake_data
fake_data$model = "truth"
fake_data$sample_num = "0"
fake_data <- fake_data[,names(fit_samples)]
plot_samples <- ggplot(data=rbind(fit_samples, fake_data)) +
geom_line(mapping=aes(x=t, y=theta, group=sample_num,color=model,
size=ifelse(model=="truth","truth","models" )), alpha=1) +
ggtitle("samples from posterior theta") +
scale_size_discrete("", range=c(.5,2), guide="none")
plot_samples
}
plot_samples(list(fit=fit2, fake_data=fake_data), 20)
fit
names(fit)
fits=fit
fake_data <- fits$fake_data
fit <- fits$fit
truth_global_for_silly_reasons <<- fake_data[1,par]  #global for silly reasons
par
par=k_0
truth_global_for_silly_reasons <<- fake_data[1,par]  #global for silly reasons
s <- extract(fit, pars=par)[[par]]
ggplot(data=samplesDF) +
geom_histogram(mapping=aes(par, ..density..),
geom_vline(aes(xintercept = truth_global_for_silly_reasons)) +
ggtitle(paste("posterior for",par,"with line at truth"))
)
samplesDF <- data.frame(par=s)
ggplot(data=samplesDF) +
geom_histogram(mapping=aes(par, ..density..),
geom_vline(aes(xintercept = truth_global_for_silly_reasons)) +
ggtitle(paste("posterior for",par,"with line at truth"))
)
ggplot(data=samplesDF) +
geom_histogram(mapping=aes(par, ..density..),
geom_vline(mapping=aes(xintercept = truth_global_for_silly_reasons)) +
ggtitle(paste("posterior for",par,"with line at truth"))
)
ggplot(data=samplesDF) +
geom_histogram(mapping=aes(par, ..density..) +
geom_vline(mapping=aes(xintercept = truth_global_for_silly_reasons)) +
ggtitle(paste("posterior for",par,"with line at truth"))
)
ggplot(data=samplesDF) +
geom_histogram(mapping=aes(par, ..density..)) +
geom_vline(mapping=aes(xintercept = truth_global_for_silly_reasons)) +
ggtitle(paste("posterior for",par,"with line at truth"))
par
par = "k_0"
fake_data <- fits$fake_data
fit <- fits$fit
truth_global_for_silly_reasons <<- fake_data[1,par]  #global for silly reasons
s <- extract(fit, pars=par)[[par]]
samplesDF <- data.frame(par=s)
ggplot(data=samplesDF) +
geom_histogram(mapping=aes(par, ..density..)) +
geom_vline(mapping=aes(xintercept = truth_global_for_silly_reasons)) +
ggtitle(paste("posterior for",par,"with line at truth"))
fake_data[1,]
truth=50
truth_global_for_silly_reasons <<- truth  #global for silly reasons
plot_posteriors_both_models <- function(fit, par, truth) {
truth_global_for_silly_reasons <<- truth  #global for silly reasons
ggplot(data=data.frame(par=extract(fit, pars=par)[[par]])) +
geom_histogram(mapping=aes(par, ..density..)) +
geom_vline(mapping=aes(xintercept = truth_global_for_silly_reasons)) +
ggtitle(paste("posterior for",par,"with line at truth"))
}
plot_posteriors <- function(fit, par, truth) {
truth_global_for_silly_reasons <<- truth  #global for silly reasons
ggplot(data=data.frame(par=extract(fit, pars=par)[[par]])) +
geom_histogram(mapping=aes(par, ..density..)) +
geom_vline(mapping=aes(xintercept = truth_global_for_silly_reasons)) +
ggtitle(paste("posterior for",par,"with line at truth"))
}
plot_posteriors(fit2, "k_0", 50)
plot_posteriors(fit2, "k_0", 30)
plot_posteriors(fit2, "s", 1)
plot_samples <- function(fit, n) {
fit_samples <- samples_from_fit_to_DF(fit$fit, "theta", n)
fit_samples$t <- fit$fake_data$t  #using R's vector recycling feels dirty
fit_samples$model = "model"
fake_data <- fit$fake_data
fake_data$model = "truth"
fake_data$sample_num = "0"
fake_data <- fake_data[,names(fit_samples)]
ggplot(data=rbind(fit_samples, fake_data)) +
geom_line(mapping=aes(x=t, y=theta, group=sample_num,color=model, color=model)) +
ggtitle("samples from posterior theta")
}
plot_samples(list(fit=fit2, fake_data=fake_data), 20)
#plot samples from posterior for theta
plot_samples <- function(fit, n) {
fit_samples <- samples_from_fit_to_DF(fit$fit, "theta", n)
fit_samples$t <- fit$fake_data$t  #using R's vector recycling feels dirty
fit_samples$model = "model"
fake_data <- fit$fake_data
fake_data$model = "truth"
fake_data$sample_num = "0"
fake_data <- fake_data[,names(fit_samples)]
ggplot(data=rbind(fit_samples, fake_data)) +
geom_line(mapping=aes(x=t, y=theta, group=sample_num,color=model, color=model, size=model), alpha=1) +
ggtitle("samples from posterior theta") +
scale_size_discrete("", range=c(.5,2), guide="none")
}
plot_samples(list(fit=fit2, fake_data=fake_data), 20)
fake_data <- generate_data(30,1,50,.5)
plot_fake_data(fake_data)
fake_data <- generate_data(30,1,50,.5)
plot_fake_data(fake_data)
fake_data <- generate_data(30,1,50,.5)
plot_fake_data(fake_data)
set.seed(1)
fake_data <- generate_data(30,1,50,.5)
plot_fake_data(fake_data)
set.seed(1)
k_0 <- 30
s=1
N=50
set.seed(1)
k_0 <- 30
s=1
N=50
sigma_y=0.5
fake_data <- generate_data(k_0,s,N,sigma_y)
plot_fake_data(fake_data)
fit1 <- stan("chi_square_jumps hierarchical.stan",
data = list(N=50, y=fake_data$y), iter = 1000, chains = 4)
print(fit1)
fit2 <- stan(fit=fit1, data = list(N=50, y=fake_data$y), iter = 10000, chains = 4)
print(fit1)
print(fit2)
print(fit2)
set.seed(2)
k_0 <- 30
s=1
N=50
sigma_y=0.5
fake_data <- generate_data(k_0,s,N,sigma_y)
plot_fake_data(fake_data)
fit1 <- stan("chi_square_jumps hierarchical.stan",
data = list(N=50, y=fake_data$y), iter = 1000, chains = 4)
print(fit1)
print(fit1)
print(fit2)
plot_fake_data(fake_data)+
geom_line(data=fake_data, aes(x=t,y=posterior_theta_means, color="posterior theta means"))
fake_data$posterior_theta_means <- get_posterior_mean(fit2,pars="theta")[,5]
plot_fake_data(fake_data)+
geom_line(data=fake_data, aes(x=t,y=posterior_theta_means, color="posterior theta means"))
plot_posteriors(fit2, "k_0", k_0)
plot_posteriors(fit2, "s", s)
plot_posteriors(fit2, "sigma_y", sigma_y)
fit2 <- stan(fit=fit1, data = list(N=50, y=fake_data$y), iter = 10000, chains = 4)
fake_data$posterior_theta_means <- get_posterior_mean(fit2,pars="theta")[,5]
plot_fake_data(fake_data)+
geom_line(data=fake_data, aes(x=t,y=posterior_theta_means, color="posterior theta means"))
print(fit2)
plot_posteriors(fit2, "k_0", k_0)
plot_posteriors(fit2, "s", s)
plot_posteriors(fit2, "sigma_y", sigma_y)
plot_posteriors(fit2, "s", s)
plot_posteriors(fit2, "k_0", k_0)
plot_fake_data(fake_data)
print(fit2)
print(fit1)
fake_data$posterior_theta_means <- get_posterior_mean(fit1,pars="theta")[,5]
plot_fake_data(fake_data)+
geom_line(data=fake_data, aes(x=t,y=posterior_theta_means, color="posterior theta means"))
plot_samples(list(fit=fit2, fake_data=fake_data), 20)
plot_samples(list(fit=fit2, fake_data=fake_data), 50)
plot_samples(list(fit=fit2, fake_data=fake_data), 100)
plot_samples(list(fit=fit2, fake_data=fake_data), 1000)
plot_samples(list(fit=fit1, fake_data=fake_data), 1000)
plot_samples(list(fit=fit1, fake_data=fake_data), 20)
fit2 <- stan(fit=fit1, data = list(N=50, y=fake_data$y), iter = 10000, chains = 4)
print(fit2)
fake_data$posterior_theta_means <- get_posterior_mean(fit2,pars="theta")[,5]
plot_fake_data(fake_data)+
geom_line(data=fake_data, aes(x=t,y=posterior_theta_means, color="posterior theta means"))
plot_samples(list(fit=fit1, fake_data=fake_data), 20)
plot_samples(list(fit=fit2, fake_data=fake_data), 20)
plot_posteriors(fit2, "k_0", k_0)
plot_posteriors(fit2, "s", s)
plot_posteriors(fit2, "sigma_y", sigma_y)
plot_posteriors(fit2, "k_0", k_0)
plot_posteriors(fit2, "s", s)
plot_posteriors(fit1, "k_0", k_0)
plot_posteriors(fit1, "s", s)
plot_posteriors(fit2, "s", s)
plot_posteriors(fit2, "k_0", k_0)
?extract
plot_samples(list(fit=fit2, fake_data=fake_data), 20)
plot_posteriors(fit2, "k_0", k_0)
plot_posteriors(fit2, "s", s)
plot_posteriors(fit2, "sigma_y", sigma_y)
plot_samples(list(fit=fit2, fake_data=fake_data), 20)
plot_fake_data(fake_data)+
geom_line(data=fake_data, aes(x=t,y=posterior_theta_means, color="posterior theta means"))
set.seed(387)
samples3 <- ldply(c(10,100,1000), function(N) k_samples_N_internals(N, 20, generate_data_including_hyperparameters))
ggplot(data=transform(addZerosToSamples(samples3), N=factor(N))) +
geom_line(mapping=aes(x=t, y=theta, color=N, group=paste(N,sample_num))) +
ggtitle("prior for thetas, sampling hyperparameters") +
coord_cartesian(ylim=c(0,50))
k_0 <- 10
s <- 1
samples <- ldply(c(10,100,1000),
function(N) k_samples_N_internals(N, 20, function(N) generate_data(k_0, s, N, 1)))
ggplot(data=transform(addZerosToSamples(samples), N=factor(N))) +
geom_line(mapping=aes(x=t, y=theta, color=N, group=paste(N,sample_num))) +
ggtitle(paste("prior for thetas, k_0 =", k_0, ", s =", s))
k_0 <- 10
s <- 1
samples <- ldply(c(10,100,1000),
function(N) k_samples_N_internals(N, 20, function(N) generate_data(k_0, s, N, 1)))
ggplot(data=transform(addZerosToSamples(samples), N=factor(N))) +
geom_line(mapping=aes(x=t, y=theta, color=N, group=paste(N,sample_num))) +
ggtitle(paste("prior for thetas, k_0 =", k_0, ", s =", s))
k_0 <- 50
s <- 1
samples <- ldply(c(10,100,1000),
function(N) k_samples_N_internals(N, 20, function(N) generate_data(k_0, s, N, 1)))
ggplot(data=transform(addZerosToSamples(samples), N=factor(N))) +
geom_line(mapping=aes(x=t, y=theta, color=N, group=paste(N,sample_num))) +
ggtitle(paste("prior for thetas, k_0 =", k_0, ", s =", s))
samples3 <- ldply(c(10,100,1000), function(N) k_samples_N_internals(N, 20, generate_data_including_hyperparameters))
ggplot(data=transform(addZerosToSamples(samples3), N=factor(N))) +
geom_line(mapping=aes(x=t, y=theta, color=N, group=paste(N,sample_num))) +
ggtitle("prior for thetas, sampling hyperparameters") +
coord_cartesian(ylim=c(0,50))
set.seed(387)
samples3 <- ldply(c(10,100,1000), function(N) k_samples_N_internals(N, 20, generate_data_including_hyperparameters))
ggplot(data=transform(addZerosToSamples(samples3), N=factor(N))) +
geom_line(mapping=aes(x=t, y=theta, color=N, group=paste(N,sample_num))) +
ggtitle("prior for thetas, sampling hyperparameters") +
coord_cartesian(ylim=c(0,50))
require(plyr)
require(ggplot2)
library(rstan)
library(reshape2)
setwd(Sys.getenv("GITHUB_PATH"))
setwd("./misc/stan models/increasing by chi square increments/")
#Most of the actual work is done in these files (and the Stan model chi_square_jumps hierarchical.stan). Check them out if you want the details:
source("data generation etc.R")
sample_from_restricted_uniform <- function(N) {
data.frame(theta = c(0,sort(runif(N-1)),1), t=(0:N)/N)
}
k_samples_N_internals <- function(N, k, sample_function)
ldply(1:k, function(k) {
samples <- sample_function(N)
samples$sample_num = k
samples$N = N
samples
})
samples <- ldply(c(10,100,1000), function(N) k_samples_N_internals(N, 20, sample_from_restricted_uniform))
ggplot(data=transform(samples, N=factor(N))) +
geom_line(mapping=aes(x=t, y=theta, color=N, group=paste(N,sample_num))) +
ggtitle("Samples from uniform distributio (with monotonicity)")
addZerosToSamples <- function(samples) {
samplesZero <- samples[!duplicated(samples[,c("sample_num","N")]),]
samplesZero[,c("theta","y","t")] <- 0
rbind(samples,samplesZero)
}
k_0 <- 10
s <- 1
samples <- ldply(c(10,100,1000),
function(N) k_samples_N_internals(N, 20, function(N) generate_data(k_0, s, N, 1)))
ggplot(data=transform(addZerosToSamples(samples), N=factor(N))) +
geom_line(mapping=aes(x=t, y=theta, color=N, group=paste(N,sample_num))) +
ggtitle(paste("prior for thetas, k_0 =", k_0, ", s =", s))
k_0 <- 50
s <- 1
samples <- ldply(c(10,100,1000),
function(N) k_samples_N_internals(N, 20, function(N) generate_data(k_0, s, N, 1)))
ggplot(data=transform(addZerosToSamples(samples), N=factor(N))) +
geom_line(mapping=aes(x=t, y=theta, color=N, group=paste(N,sample_num))) +
ggtitle(paste("prior for thetas, k_0 =", k_0, ", s =", s))
samples3 <- ldply(c(10,100,1000), function(N) k_samples_N_internals(N, 20, generate_data_including_hyperparameters))
ggplot(data=transform(addZerosToSamples(samples3), N=factor(N))) +
geom_line(mapping=aes(x=t, y=theta, color=N, group=paste(N,sample_num))) +
ggtitle("prior for thetas, sampling hyperparameters") +
coord_cartesian(ylim=c(0,50))
set.seed(2)
k_0 <- 30
s=1
N=50
sigma_y=0.5
fake_data <- generate_data(k_0,s,N,sigma_y)
plot_fake_data(fake_data)
fit1 <- stan("chi_square_jumps hierarchical.stan",
data = list(N=50, y=fake_data$y), iter = 1000, chains = 4)
print(fit1)
fit2 <- stan(fit=fit1, data = list(N=50, y=fake_data$y), iter = 10000, chains = 4)
print(fit2)
fake_data$posterior_theta_means <- get_posterior_mean(fit2,pars="theta")[,5]
plot_fake_data(fake_data)+
geom_line(data=fake_data, aes(x=t,y=posterior_theta_means, color="posterior theta means"))
fake_data$posterior_theta_means <- get_posterior_mean(fit2,pars="theta")[,5]
plot_fake_data(fake_data)+
geom_line(data=fake_data, aes(x=t,y=posterior_theta_means, color="posterior theta means"))
print(fit1)
fake_data$posterior_theta_means <- get_posterior_mean(fit1,pars="theta")[,5]
plot_fake_data(fake_data)+
geom_line(data=fake_data, aes(x=t,y=posterior_theta_means, color="posterior theta means"))
plot_samples(list(fit=fit1, fake_data=fake_data), 20)
plot_fake_data(fake_data)+
geom_line(data=fake_data, aes(x=t,y=posterior_theta_means, color="posterior theta means"))
plot_samples(list(fit=fit1, fake_data=fake_data), 20)
plot_posteriors(fit2, "k_0", k_0)
plot_samples(list(fit=fit1, fake_data=fake_data), 200)
plot_posteriors(fit1, "k_0", k_0)
plot_posteriors(fit1, "s", s)
plot_posteriors(fit1, "sigma_y", sigma_y)
