geom_segment(mapping=aes(xend=Year, yend=Depth), size=3) +
geom_text(aes(label = Year), size=5, hjust=0, angle=90) +
scale_y_continuous(limits = c(-15000, 500))
ggplot(data=depths, aes(x=Year, y=0)) +
geom_segment(mapping=aes(xend=Year, yend=Depth), size=3) +
geom_text(aes(label = Year), size=5, hjust=0, angle=90) +
scale_y_continuous(limits = c(-12000, 500))
depths
ggplot(data=depths, aes(x=Year, y=0)) +
geom_segment(mapping=aes(xend=Year, yend=Depth), size=3)
ggplot(data=depths, aes(x=Year, y=Depth)) +
geom_segment(mapping=aes(xend=Year, yend=0), size=3) +
geom_text(aes(label = Year), size=5, hjust=0, angle=90) +
scale_y_continuous(limits = c(-12000, 500))
ggplot(data=depths, aes(x=Year, y=Depth)) +
geom_segment(mapping=aes(xend=Year, yend=0), size=3) +
geom_text(aes(label = Year), y=0, size=5, hjust=0, angle=90) +
scale_y_continuous(limits = c(-12000, 500))
ggplot(data=depths, aes(x=Year, y=Depth),title="hi") +
geom_segment(mapping=aes(xend=Year, yend=0), size=3) +
geom_text(aes(label = Year), y=0, size=5, hjust=0, angle=90) +
scale_y_continuous(limits = c(-12000, 500))
ggplot(data=depths, aes(x=Year, y=Depth)) +
geom_segment(mapping=aes(xend=Year, yend=0), size=3) +
geom_text(aes(label = Year), y=0, size=5, hjust=0, angle=90) +
scale_y_continuous(limits = c(-12000, 500)) +
ggtitle("Sinking the Empire Mine Shaft")
2**3
utility = function(r) return (1-r)**(1.01*r)
seq
seq(0,1,.01)
s = seq(0,1,.01)
utility = function(r) return (1-r)**(1.01*r)
utility(seq)
utility(.5)
utility(.1)
utility(.01)
utility(0)
utility = function(r) return (1-r)*(1.01**r)
utility(0)
utility(.1)
utility(.5)
utility = function(r) return (n-r)*(1.01**r)
utility = function(n,r) return (n-r)*(1.01**r)
s = seq(1000)
s
utility(1000,1)
utility(1000,0)
utility(1000,2)
utility(1000,4)
1.01**4
996*1.01**4
utility = function(n,r) return (n-r)*(1.01**r)
utility(1000,4)
install.packages('inline')
install.packages('Rcpp')
system('g++ -v')
system('g++ -v')
Sys.getenv("PATH")
Sys.getenv("PATH")
library(inline)
library(Rcpp)
src <- '
std::vector<std::string> s;
s.push_back("hello");
s.push_back("world");
return Rcpp::wrap(s);
'
hellofun <- cxxfunction(body = src, includes = '', plugin = 'Rcpp', verbose = FALSE)
cat(hellofun(), '\n')
library(inline)
library(Rcpp)
src <- '
std::vector<std::string> s;
s.push_back("hello");
s.push_back("world");
return Rcpp::wrap(s);
'
hellofun <- cxxfunction(body = src, includes = '', plugin = 'Rcpp', verbose = FALSE)
cat(hellofun(), '\n')
## add current repository of rstan
Sys.setenv(R_MAKEVARS_USER='')
options(repos = c(getOption("repos"), rstan = "http://wiki.stan.googlecode.com/git/R"))
install.packages('rstan', type = 'source')
library(rstan)
set_cppo("fast")  # for best running speed
schools_code <- '
data {
int<lower=0> J; // number of schools
real y[J]; // estimated treatment effects
real<lower=0> sigma[J]; // s.e. of effect estimates
}
parameters {
real mu;
real<lower=0> tau;
real eta[J];
}
transformed parameters {
real theta[J];
for (j in 1:J)
theta[j] <- mu + tau * eta[j];
}
model {
eta ~ normal(0, 1);
y ~ normal(theta, sigma);
}
'
schools_dat <- list(J = 8,
y = c(28,  8, -3,  7, -1,  1, 18, 12),
sigma = c(15, 10, 16, 11,  9, 11, 10, 18))
fit <- stan(model_code = schools_code, data = schools_dat,
iter = 1000, chains = 4)
fit2 <- stan(fit = fit1, data = schools_dat, iter = 10000, chains = 4)
fit2 <- stan(fit = fit, data = schools_dat, iter = 10000, chains = 4)
print fit2
print(fit2)
plot(fit2)
la <- extract(fit2, permuted = TRUE) # return a list of arrays
?extract
la
names(la)
la$mu
hist(la$mu)
a <- extract(fit2, permuted = FALSE)
a2 <- as.array(fit2)
m <- as.matrix(fit2)
When you click the **Knit HTML** button a web page will be generated that includes both content as well as the output of any embedded R code chunks within the document. You can embed an R code chunk like this: $5+2$
Sys.getenv()
Sys.getenv("windir")
Sys.getenv("SHELL_DATA")
Sys.getenv("SHELL_DATA")
setwd(Sys.getenv("SHELL_PATH"))
setwd("c:")
Sys.getenv("SHELL_PATH")
Sys.getenv("SHELL_DATA")
```{r echo=FALSE, fig.show='animate'}
```{r echo=FALSE, fig.show='animate', dev='jpeg'}
library(animation)
if (!("animation" %in% rownames(installed.packages()))) install.packages("animation")
ani.start
library("animation")
ani.start
ani.start()
dates = seq.Date(as.Date("2009/1/1"),as.Date("2014/1/1"),by="3 months")
for (i in seq_along(dates))  {
plot_wells_date(dates[i])
}
plot_wells_date <- function(cutoff) {
```{r wellsovertime, echo=FALSE, fig.show='animate'}
ani.stop()
library("stan")
library("rstan")
?stan
load("C:/Users/dchud_000/Downloads/results by distance.RData")
rf_results_by_distance
library(ggplot2)
library(ddplay)
library(plyr)
library(reshape2)
melt(rf_results_by_distance)
?melt
?reshape
rf_results_by_distance
melt(rf_results_by_distance)
?melt
melt(rf_results_by_distance)
?reshape
str(rf_results_by_distance)
reshape(rf_results_by_distance, idvar="distanceCutoff", direction="long")
str(rf_results_by_distance)
reshape(rf_results_by_distance, idvar="distanceCutoff", varying=names(rf_results_by_distance)[1:4], vardirection="long")
reshape(rf_results_by_distance, idvar="distanceCutoff", varying=names(rf_results_by_distance)[1:4], direction="long")
melt(rf_results_by_distance, id="distanceCutoff")
resulted_melted <- melt(rf_results_by_distance, id="distanceCutoff")
results_melted <- melt(rf_results_by_distance, id="distanceCutoff")
str(results_melted)
subset(results_melted, variable %in% c("r_rmse", "m_rmse"))
ggplot(data=subset(results_melted, variable %in% c("r_rmse", "m_rmse")))
str(results_melted)
geom_boxplot(mapping=aes(x=distanceCutoff, y=value, color=variable))
ggplot(data=subset(results_melted, variable %in% c("r_rmse", "m_rmse"))) +
geom_boxplot(mapping=aes(x=distanceCutoff, y=value, color=variable))
results_melted2 <- subset(results_melted, variable %in% c("f_rmse", "m_rmse"))
results_melted2
ggplot(data=results_melted2) +
geom_boxplot(mapping=aes(x=distanceCutoff, y=value, color=variable))
ggplot(data=results_melted2) +
geom_boxplot(mapping=aes(x=factor(distanceCutoff), y=value, color=variable))
ggplot(data=results_melted2) +
geom_boxplot(mapping=aes(x=distanceCutoff, y=value, color=variable, group=distanceCutoff))
ggplot(data=results_melted2) +
geom_boxplot(mapping=aes(x=distanceCutoff, y=value, color=variable))
library(sphere, lib.loc="~/Rlibs")
install.packages("sphere")
library(sphere, lib.loc="C:/Users/dchud_000/Downloads/sphere_0.1.tar.gz")
library(sphere, lib.loc="C:/Users/dchud_000/Downloads/")
library(sphere, lib.loc="C:/Users/dchud_000/Downloads/sphere_0.1")
library(sphere, lib.loc="C:/Users/dchud_000/Downloads/sphere_0.1/")
install.packages("C:/Users/dchud_000/Downloads/sphere_0.1.tar.gz", repos = NULL, type = "source")
library(sphere, lib.loc="C:/Users/dchud_000/Downloads/sphere_0.1/")
library(sphere, lib.loc="C:/Users/dchud_000/Downloads/")
library(randomForest)
?partialPlot
data(iris)
set.seed(543)
iris.rf <- randomForest(Species~., iris)
partialPlot(iris.rf, iris, Petal.Width, "versicolor")
partialPlot(iris.rf, iris, "Petal.Width", "versicolor")
source('~/.active-rstudio-document', echo=TRUE)
a=()
myPartialPlotFunction  <- function(forest, dataset, variable) {
partialPlot(forest, dataset, variable)
}
myPartialPlotFunction(iris.rf, iris, Petal.Width, "versicolor")
myPartialPlotFunction(iris.rf, iris, Petal.Width)
myPartialPlotFunction(iris.rf, iris, Petal.Width)
iris
Sepal.Length
myPartialPlotFunction  <- function(forest, dataset, variable) {
partialPlot(iris.rf, iris, variable)
}
myPartialPlotFunction(Petal.Width)
myPartialPlotFunction(Petal.Width)
myPartialPlotFunction("Petal.Width")
myPartialPlotFunction  <- function(forest, dataset, variable) {
partialPlot(iris.rf, iris, get("variable")
}
myPartialPlotFunction  <- function(forest, dataset, variable) {
partialPlot(iris.rf, iris, get("variable"))
}
myPartialPlotFunction(Petal.Width)
?get
myPartialPlotFunction  <- function(forest, dataset, variable) {
I_REALLY_SHOULDNT_HAVE_TO_MAKE_THIS_GLOBAL <<- variable
partialPlot(iris.rf, iris, get("variable"))
}
myPartialPlotFunction(Petal.Width)
myPartialPlotFunction  <- function(forest, dataset, variable) {
I_REALLY_SHOULDNT_HAVE_TO_MAKE_THIS_GLOBAL <<- variable
partialPlot(iris.rf, iris, get("I_REALLY_SHOULDNT_HAVE_TO_MAKE_THIS_GLOBAL"))
}
myPartialPlotFunction(Petal.Width)
myPartialPlotFunction  <- function(forest, dataset, variable) {
partialPlot(iris.rf, iris, get("variable"))
}
myPartialPlotFunction("Petal.Width")
myPartialPlotFunction  <- function(forest, dataset, variable) {
I_REALLY_SHOULDNT_HAVE_TO_MAKE_THIS_GLOBAL <<- variable
partialPlot(iris.rf, iris, get("I_REALLY_SHOULDNT_HAVE_TO_MAKE_THIS_GLOBAL"))
}
myPartialPlotFunction("Petal.Width")
myPartialPlotFunction  <- function(variable) {
I_REALLY_SHOULDNT_HAVE_TO_MAKE_THIS_GLOBAL <<- variable
partialPlot(iris.rf, iris, get("I_REALLY_SHOULDNT_HAVE_TO_MAKE_THIS_GLOBAL"))
}
myPartialPlotFunction("Petal.Width")
partialPlot(iris.rf, iris, Petal.Width, "versicolor")
partialPlot(iris.rf, iris, Petal.Width, "versicolor")
partialPlot(iris.rf, iris, Petal.Width, "versicolor")
iris.rf <- randomForest(Species~., iris)
partialPlot(iris.rf, iris, Petal.Width, "versicolor")
iris.rf <- randomForest(Species~., iris)
partialPlot(iris.rf, iris, Petal.Width, "versicolor")
myPartialPlotFunction("Petal.Width")
partialPlot(iris.rf, iris, Petal.Width, "versicolor")
partialPlot(iris.rf, iris, Petal.Width, "versicolor")
partialPlot(iris.rf, iris, Petal.Width, "versicolor")
myPartialPlotFunction  <- function(variable) {
I_REALLY_SHOULDNT_HAVE_TO_MAKE_THIS_GLOBAL <<- variable
partialPlot(iris.rf, iris, get("I_REALLY_SHOULDNT_HAVE_TO_MAKE_THIS_GLOBAL"))
}
myPartialPlotFunction("Petal.Width")
myPartialPlotFunction("Petal.Width")
partialPlot(iris.rf, iris, Petal.Width, "versicolor")
partialPlot(iris.rf, iris, Petal.Width)
partialPlot(iris.rf, iris, Petal.Width)
?partialPlot
iris.rf <- randomForest(Species~., iris, "versicolor")
library(randomForest)
data(iris)
iris.rf <- randomForest(Species~., iris)
partialPlot(iris.rf, iris, Petal.Width, "versicolor")
?partialPlot
partialPlot(iris.rf, iris, Petal.Width, "versicolor")
myPartialPlotFunction  <- function(variable) {
I_REALLY_SHOULDNT_HAVE_TO_MAKE_THIS_GLOBAL <<- variable
partialPlot(iris.rf, iris, get("I_REALLY_SHOULDNT_HAVE_TO_MAKE_THIS_GLOBAL"), "versicolor")
}
myPartialPlotFunction("Petal.Width")
?partialPlot
ozone.rf <- randomForest(Ozone ~ ., airquality, importance=TRUE)
airquality <- na.omit(airquality)
ozone.rf <- randomForest(Ozone ~ ., airquality, importance=TRUE)
importance(ozone.rf)
partialPlot(ozone.rf, airquality, Temp)
partialPlot(ozone.rf, airquality, "Temp")
myPartialPlotFunction("Temp")
myPartialPlotFunction  <- function(variable) {
partialPlot(ozone.rf, airquality, variable)
}
myPartialPlotFunction("Temp")
myPartialPlotFunction  <- function(variable) {
I_REALLY_SHOULDNT_HAVE_TO_MAKE_THIS_GLOBAL <<- variable
partialPlot(ozone.rf, airquality, get("I_REALLY_SHOULDNT_HAVE_TO_MAKE_THIS_GLOBAL"))
}
myPartialPlotFunction("Petal.Width")
myPartialPlotFunction  <- function(variable) {
I_REALLY_SHOULDNT_HAVE_TO_MAKE_THIS_GLOBAL <<- variable
partialPlot(ozone.rf, airquality, get("I_REALLY_SHOULDNT_HAVE_TO_MAKE_THIS_GLOBAL"))
}
myPartialPlotFunction("Temp")
myPartialPlotFunction  <- function(variable) {
partialPlot(ozone.rf, airquality, get("variable")
}
myPartialPlotFunction  <- function(variable) {
partialPlot(ozone.rf, airquality, get("variable"))
}
myPartialPlotFunction("Temp")
f <- function(){
a <- 5
eval("a+2")
}
f()}
f()
eval(a+2)
f <- function(){
a <- 5
eval(a+2)
f()
f()
}
f <- function(){
a <- 5
eval(a+2)
}
f()
?eval
?eval
evalq("2+2")
evalq("2")
f1 <- function(){
a <- 5
eval(parse(text="a+2")
}
f2 <- function(){
a <- 5
eval(parse(text="a+2"))
}
a
f2()
a=1
f1 <- function(){
a <- 5
eval(a+2)
}
f1()
f2 <- function(){
a <- 5
eval(parse(text="a+2"))
}
f2()
library(rstan)
library(ggplot2)
library(plyr)
library(reshape2)
setwd(Sys.getenv("GITHUB_PATH"))
setwd("./misc/stan models/increasing by chi square increments/")
source("data generation function.R")
set.seed(77473764)
generate_data_including_hyperparameters <- function(N) {
print(mean_mu_N <- runif(1)*1000)
print(sigma_mu_N <- runif(1)*mean_mu_N)
print(sigma_0 <- runif(1)*10)
sigma_mu_N_sq <- sigma_mu_N**2
sigma_0_sq <- sigma_0**2
s = sigma_mu_N_sq / (2 * mean_mu_N)
k_0 = mean_mu_N / s
generate_data(k_0, s, N, sigma_0_sq)
}
library(rstan)
library(ggplot2)
library(plyr)
library(reshape2)
setwd(Sys.getenv("GITHUB_PATH"))
setwd("./misc/stan models/increasing by chi square increments/")
source("data generation function.R")
set.seed(77473764)
N=10
fake_data <- generate_data_including_hyperparameters(N)
plot_fake_data(fake_data)
N_and_ys <- list(N=N, y=fake_data$y)
fit1 <- stan("chi_square_jumps hierarchical.stan", data = N_and_ys, iter = 1000, chains = 4)
print(fit1)
fit2 <- stan(fit= fit1, data = N_and_ys, iter = 10000, chains = 4)
print(fit2)
fit3 <- stan(fit= fit1, data = N_and_ys, iter = 100000, chains = 4)
print(fit3)
mu_means <- get_posterior_mean(fit1,pars="mu")
names(mu_means)
str(mu_means)
class(mu_means)
dim(mu_means)
row.names(mu_means)
col.names(mu_means)
column.names(mu_means)
colnames(mu_means)
mu_means <- get_posterior_mean(fit1,pars="mu")[,5]
mu_means
model_plot <- fake_data_plot_with_aggregate + geom_line(aes(x=fake_data$t,y=mu_means, color="fitted mu"))
model_plot <- plot_fake_data(fake_data) + geom_line(aes(x=fake_data$t,y=mu_means, color="fitted mu"))
fake_data
model_plot <- plot_fake_data(fake_data) + geom_line(aes(x=fake_data$t,y=mu_means, color="fitted mu"))
plot_fake_data
plot_fake_data <- function(fake_data) {
fake_data_plot <- ggplot() + scale_color_discrete("") +
geom_line(data=fake_data, mapping=aes(x=t,y=mu, color="mu")) +
geom_point(data=fake_data, mapping=aes(x=t,y=y,color="y"))
fake_data_plot
}
model_plot <- plot_fake_data(fake_data) + geom_line(aes(x=fake_data$t,y=mu_means, color="fitted mu"))
model_plot
mu_means <- get_posterior_mean(fit3,pars="mu")[,5]
mu_means
plot_fake_data
model_plot <- plot_fake_data(fake_data) + geom_line(aes(x=fake_data$t,y=mu_means, color="fitted mu"))
model_plot
model_plot
mu_means <- get_posterior_mean(fit2,pars="mu")[,5]
mu_means
plot_fake_data
model_plot <- plot_fake_data(fake_data) + geom_line(aes(x=fake_data$t,y=mu_means, color="fitted mu"))
model_plot
set.seed(786)
N=10
fake_data <- generate_data_including_hyperparameters(N)
plot_fake_data(fake_data)
N_and_ys <- list(N=N, y=fake_data$y)
fit1 <- stan("chi_square_jumps hierarchical.stan", data = N_and_ys, iter = 1000, chains = 4)
print(fit1)
mu_means <- get_posterior_mean(fit1,pars="mu")[,5]
mu_means
print(fit1)
mu_means
plot_fake_data
model_plot <- plot_fake_data(fake_data) + geom_line(aes(x=fake_data$t,y=mu_means, color="fitted mu"))
model_plot
set.seed(67555)
N=10
fake_data <- generate_data_including_hyperparameters(N)
plot_fake_data(fake_data)
set.seed(45747)
N=10
fake_data <- generate_data_including_hyperparameters(N)
plot_fake_data(fake_data)
N_and_ys <- list(N=N, y=fake_data$y)
fit2 <- stan(fit= fit1, data = N_and_ys, iter = 1000, chains = 4)
print(fit2)
mu_means <- get_posterior_mean(fit1,pars="mu")[,5]
mu_means
plot_fake_data
model_plot <- plot_fake_data(fake_data) + geom_line(aes(x=fake_data$t,y=mu_means, color="fitted mu"))
model_plot
generate_data_including_hyperparameters
library(rstan)
library(ggplot2)
library(plyr)
library(reshape2)
setwd(Sys.getenv("GITHUB_PATH"))
setwd("./misc/stan models/increasing by chi square increments/")
source("data generation function.R")
generate_data_including_hyperparameters
set.seed(45747)
N=10
fake_data <- generate_data_including_hyperparameters(N)
plot_fake_data(fake_data)
plot_fake_data(fake_data)
fake_data <- generate_data_including_hyperparameters(N); plot_fake_data(fake_data)
fake_data <- generate_data_including_hyperparameters(N); plot_fake_data(fake_data)
fake_data <- generate_data_including_hyperparameters(N); plot_fake_data(fake_data)
fake_data <- generate_data_including_hyperparameters(N); plot_fake_data(fake_data)
fake_data <- generate_data_including_hyperparameters(N); plot_fake_data(fake_data)
fake_data <- generate_data_including_hyperparameters(N); plot_fake_data(fake_data)
set.seed(45747)
N=10
fake_data <- generate_data_including_hyperparameters(N); plot_fake_data(fake_data)
set.seed(45747)
N=10
fake_data <- generate_data_including_hyperparameters(N)
plot_fake_data(fake_data)
set.seed(444)
N=10
fake_data <- generate_data_including_hyperparameters(N)
plot_fake_data(fake_data)
set.seed(4443)
N=10
fake_data <- generate_data_including_hyperparameters(N)
plot_fake_data(fake_data)
N_and_ys <- list(N=N, y=fake_data$y)
fit1 <- stan("chi_square_jumps hierarchical.stan", data = N_and_ys, iter = 1000, chains = 4)
print(fit1)
print(fit1)
plot_fake_data <- function(fake_data) {
fake_data_plot <- ggplot() + scale_color_discrete("") +
geom_line(data=fake_data, mapping=aes(x=t,y=mu, color="mu")) +
geom_point(data=fake_data, mapping=aes(x=t,y=y,color="y"))
fake_data_plot
}
mu_means <- get_posterior_mean(fit1,pars="mu")[,5]
mu_means
plot_fake_data
model_plot <- plot_fake_data(fake_data) + geom_line(aes(x=fake_data$t,y=mu_means, color="fitted mu"))
model_plot
