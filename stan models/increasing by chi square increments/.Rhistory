}
myPartialPlotFunction(iris.rf, iris, Petal.Width, "versicolor")
myPartialPlotFunction(iris.rf, iris, Petal.Width)
myPartialPlotFunction(iris.rf, iris, Petal.Width)
iris
Sepal.Length
myPartialPlotFunction  <- function(forest, dataset, variable) {
partialPlot(iris.rf, iris, variable)
}
myPartialPlotFunction(Petal.Width)
myPartialPlotFunction(Petal.Width)
myPartialPlotFunction("Petal.Width")
myPartialPlotFunction  <- function(forest, dataset, variable) {
partialPlot(iris.rf, iris, get("variable")
}
myPartialPlotFunction  <- function(forest, dataset, variable) {
partialPlot(iris.rf, iris, get("variable"))
}
myPartialPlotFunction(Petal.Width)
?get
myPartialPlotFunction  <- function(forest, dataset, variable) {
I_REALLY_SHOULDNT_HAVE_TO_MAKE_THIS_GLOBAL <<- variable
partialPlot(iris.rf, iris, get("variable"))
}
myPartialPlotFunction(Petal.Width)
myPartialPlotFunction  <- function(forest, dataset, variable) {
I_REALLY_SHOULDNT_HAVE_TO_MAKE_THIS_GLOBAL <<- variable
partialPlot(iris.rf, iris, get("I_REALLY_SHOULDNT_HAVE_TO_MAKE_THIS_GLOBAL"))
}
myPartialPlotFunction(Petal.Width)
myPartialPlotFunction  <- function(forest, dataset, variable) {
partialPlot(iris.rf, iris, get("variable"))
}
myPartialPlotFunction("Petal.Width")
myPartialPlotFunction  <- function(forest, dataset, variable) {
I_REALLY_SHOULDNT_HAVE_TO_MAKE_THIS_GLOBAL <<- variable
partialPlot(iris.rf, iris, get("I_REALLY_SHOULDNT_HAVE_TO_MAKE_THIS_GLOBAL"))
}
myPartialPlotFunction("Petal.Width")
myPartialPlotFunction  <- function(variable) {
I_REALLY_SHOULDNT_HAVE_TO_MAKE_THIS_GLOBAL <<- variable
partialPlot(iris.rf, iris, get("I_REALLY_SHOULDNT_HAVE_TO_MAKE_THIS_GLOBAL"))
}
myPartialPlotFunction("Petal.Width")
partialPlot(iris.rf, iris, Petal.Width, "versicolor")
partialPlot(iris.rf, iris, Petal.Width, "versicolor")
partialPlot(iris.rf, iris, Petal.Width, "versicolor")
iris.rf <- randomForest(Species~., iris)
partialPlot(iris.rf, iris, Petal.Width, "versicolor")
iris.rf <- randomForest(Species~., iris)
partialPlot(iris.rf, iris, Petal.Width, "versicolor")
myPartialPlotFunction("Petal.Width")
partialPlot(iris.rf, iris, Petal.Width, "versicolor")
partialPlot(iris.rf, iris, Petal.Width, "versicolor")
partialPlot(iris.rf, iris, Petal.Width, "versicolor")
myPartialPlotFunction  <- function(variable) {
I_REALLY_SHOULDNT_HAVE_TO_MAKE_THIS_GLOBAL <<- variable
partialPlot(iris.rf, iris, get("I_REALLY_SHOULDNT_HAVE_TO_MAKE_THIS_GLOBAL"))
}
myPartialPlotFunction("Petal.Width")
myPartialPlotFunction("Petal.Width")
partialPlot(iris.rf, iris, Petal.Width, "versicolor")
partialPlot(iris.rf, iris, Petal.Width)
partialPlot(iris.rf, iris, Petal.Width)
?partialPlot
iris.rf <- randomForest(Species~., iris, "versicolor")
library(randomForest)
data(iris)
iris.rf <- randomForest(Species~., iris)
partialPlot(iris.rf, iris, Petal.Width, "versicolor")
?partialPlot
partialPlot(iris.rf, iris, Petal.Width, "versicolor")
myPartialPlotFunction  <- function(variable) {
I_REALLY_SHOULDNT_HAVE_TO_MAKE_THIS_GLOBAL <<- variable
partialPlot(iris.rf, iris, get("I_REALLY_SHOULDNT_HAVE_TO_MAKE_THIS_GLOBAL"), "versicolor")
}
myPartialPlotFunction("Petal.Width")
?partialPlot
ozone.rf <- randomForest(Ozone ~ ., airquality, importance=TRUE)
airquality <- na.omit(airquality)
ozone.rf <- randomForest(Ozone ~ ., airquality, importance=TRUE)
importance(ozone.rf)
partialPlot(ozone.rf, airquality, Temp)
partialPlot(ozone.rf, airquality, "Temp")
myPartialPlotFunction("Temp")
myPartialPlotFunction  <- function(variable) {
partialPlot(ozone.rf, airquality, variable)
}
myPartialPlotFunction("Temp")
myPartialPlotFunction  <- function(variable) {
I_REALLY_SHOULDNT_HAVE_TO_MAKE_THIS_GLOBAL <<- variable
partialPlot(ozone.rf, airquality, get("I_REALLY_SHOULDNT_HAVE_TO_MAKE_THIS_GLOBAL"))
}
myPartialPlotFunction("Petal.Width")
myPartialPlotFunction  <- function(variable) {
I_REALLY_SHOULDNT_HAVE_TO_MAKE_THIS_GLOBAL <<- variable
partialPlot(ozone.rf, airquality, get("I_REALLY_SHOULDNT_HAVE_TO_MAKE_THIS_GLOBAL"))
}
myPartialPlotFunction("Temp")
myPartialPlotFunction  <- function(variable) {
partialPlot(ozone.rf, airquality, get("variable")
}
myPartialPlotFunction  <- function(variable) {
partialPlot(ozone.rf, airquality, get("variable"))
}
myPartialPlotFunction("Temp")
f <- function(){
a <- 5
eval("a+2")
}
f()}
f()
eval(a+2)
f <- function(){
a <- 5
eval(a+2)
f()
f()
}
f <- function(){
a <- 5
eval(a+2)
}
f()
?eval
?eval
evalq("2+2")
evalq("2")
f1 <- function(){
a <- 5
eval(parse(text="a+2")
}
f2 <- function(){
a <- 5
eval(parse(text="a+2"))
}
a
f2()
a=1
f1 <- function(){
a <- 5
eval(a+2)
}
f1()
f2 <- function(){
a <- 5
eval(parse(text="a+2"))
}
f2()
$$p(mu_k=x | )$$
require(plyr)
require(ggplot2)
library(rstan)
library(reshape2)
setwd(Sys.getenv("GITHUB_PATH"))
setwd("./misc/stan models/increasing by chi square increments/")
source("data generation function.R")
source("chi_square_jumps_hierarchical.R")
sample_from_restricted_uniform <- function(N) {
data.frame(theta = c(0,sort(runif(N-1)),1), t=(0:N)/N)
}
k_samples_N_internals <- function(N, k, sample_function)
ldply(1:k, function(k) {
samples <- sample_function(N)
samples$sample_num = k
samples$N = N
samples
})
samples <- ldply(c(10,100,1000), function(N) k_samples_N_internals(N, 20, sample_from_restricted_uniform))
ggplot(data=transform(samples, N=factor(N))) + geom_line(mapping=aes(x=t, y=theta, color=N, group=paste(N,sample_num)))
addZerosToSamples <- function(samples) {
samplesZero <- samples[!duplicated(samples[,c("sample_num","N")]),]
samplesZero[,c("theta","y","t")] <- 0
rbind(samples,samplesZero)
}
samples <- ldply(c(10,100,1000),
function(N) k_samples_N_internals(N, 20,
function(N) generate_data_mean_var(500, (400**2), N, 1)))
ggplot(data=transform(addZerosToSamples(samples), N=factor(N))) +
geom_line(mapping=aes(x=t, y=theta, color=N, group=paste(N,sample_num)))
samples <- ldply(c(10,100,1000),
function(N) k_samples_N_internals(N, 20,
function(N) generate_data_mean_var(500, (100**2), N, 1)))
ggplot(data=transform(addZerosToSamples(samples), N=factor(N))) + geom_line(mapping=aes(x=t, y=theta, color=N, group=paste(N,sample_num)))
mu_N=500
sigma_N=400
samples <- ldply(c(10,100,1000),
function(N) k_samples_N_internals(N, 20,
function(N) generate_data_mean_var(mu_N, (sigma_N**2), N, 1)))
ggplot(data=transform(addZerosToSamples(samples), N=factor(N))) +
geom_line(mapping=aes(x=t, y=theta, color=N, group=paste(N,sample_num))) +
ggtitle("mu_n =", mu_N, ", sigma_N =", sigma_N)
ggplot(data=transform(addZerosToSamples(samples), N=factor(N))) +
geom_line(mapping=aes(x=t, y=theta, color=N, group=paste(N,sample_num))) +
ggtitle(paste("mu_n =", mu_N, ", sigma_N =", sigma_N))
mu_N=500
sigma_N=100
samples <- ldply(c(10,100,1000),
function(N) k_samples_N_internals(N, 20,
function(N) generate_data_mean_var(mu_N, (sigma_N**2), N, 1)))
ggplot(data=transform(addZerosToSamples(samples), N=factor(N))) +
geom_line(mapping=aes(x=t, y=theta, color=N, group=paste(N,sample_num))) +
ggtitle(paste("mu_n =", mu_N, ", sigma_N =", sigma_N))
ggplot(data=transform(addZerosToSamples(samples), N=factor(N))) +
geom_line(mapping=aes(x=t, y=theta, color=N, group=paste(N,sample_num))) +
ggtitle(paste("prior for thetas, mu_N =", mu_N, ", sigma_N =", sigma_N))
set.seed(38738)
samples <- ldply(c(10,100,1000), function(N) k_samples_N_internals(N, 20, generate_data_including_hyperparameters))
ggplot(data=transform(addZerosToSamples(samples), N=factor(N))) + geom_line(mapping=aes(x=t, y=theta, color=N, group=paste(N,sample_num)))
last_plot() + coord_cartesian(ylim=c(0,1000))
samples <- ldply(c(10,100,1000), function(N) k_samples_N_internals(N, 20, generate_data_including_hyperparameters))
ggplot(data=transform(addZerosToSamples(samples), N=factor(N))) + geom_line(mapping=aes(x=t, y=theta, color=N, group=paste(N,sample_num)))
ggplot(data=transform(addZerosToSamples(samples), N=factor(N))) + geom_line(mapping=aes(x=t, y=theta, color=N, group=paste(N,sample_num))) +
ggtitle("prior for thetas, sampling hyperparameters")
last_plot() + coord_cartesian(ylim=c(0,1000)) + ggtitle("prior for thetas, sampling hyperparameters (zoomed in)")
set.seed(1)
fits1 <- generate_data_and_fit_both_models(50,10)
set.seed(1)
fits1 <- generate_data_and_fit_both_models(50,10)
print(fits1$plot + ggtitle("data and model, aggregated and not"))
print(fits1$plot + ggtitle("data and model, aggregated and not"))
plot_posteriors_both_models(fits1, "mu_N")
plot_posteriors_both_models(fits1, "sigma_N")
plot_posteriors_both_models(fits1, "sigma_y")
set.seed(7373)
plot_samples(fits1, 20)
plot_posteriors_both_models <- function(fits, par) {
fake_data <- fits$fake_data
fit <- fits$fit
fit_aggregated <- fits$fit_aggregated
truth_global_for_silly_reasons <<- fake_data[1,par]  #global for silly reasons
s <- extract(fit, pars=par)[[par]]
s2 <- extract(fit_aggregated, pars=par)[[par]]
samplesDF <- rbind(data.frame(par=s, model="not aggregated"),
data.frame(par=s2, model="aggregated"))
print(
ggplot(data=samplesDF) +
geom_histogram(mapping=aes(par, ..density.., fill=model), alpha=.5,position="dodge") +
geom_vline(aes(xintercept = truth_global_for_silly_reasons)) +
ggtitle(paste("posterior for parameter",par,"from both models, with truth"))
)
print(
ggplot(data=samplesDF) +
geom_histogram(mapping=aes(par, ..density..), alpha=.5,position="dodge") +
geom_vline(aes(xintercept = truth_global_for_silly_reasons)) + facet_grid(. ~ model)
ggtitle(paste("posterior for parameter",par,"from both models, with truth"))
)
}
plot_posteriors_both_models <- function(fits, par) {
fake_data <- fits$fake_data
fit <- fits$fit
fit_aggregated <- fits$fit_aggregated
truth_global_for_silly_reasons <<- fake_data[1,par]  #global for silly reasons
s <- extract(fit, pars=par)[[par]]
s2 <- extract(fit_aggregated, pars=par)[[par]]
samplesDF <- rbind(data.frame(par=s, model="not aggregated"),
data.frame(par=s2, model="aggregated"))
print(
ggplot(data=samplesDF) +
geom_histogram(mapping=aes(par, ..density.., fill=model), alpha=.5,position="dodge") +
geom_vline(aes(xintercept = truth_global_for_silly_reasons)) +
ggtitle(paste("posterior for parameter",par,"from both models, with truth"))
)
print(
ggplot(data=samplesDF) +
geom_histogram(mapping=aes(par, ..density..), alpha=.5,position="dodge") +
geom_vline(aes(xintercept = truth_global_for_silly_reasons)) + facet_grid(. ~ model)
ggtitle(paste("posterior for parameter",par,"from both models, with truth"))
)
}
plot_posteriors_both_models <- function(fits, par) {
fake_data <- fits$fake_data
fit <- fits$fit
fit_aggregated <- fits$fit_aggregated
truth_global_for_silly_reasons <<- fake_data[1,par]  #global for silly reasons
s <- extract(fit, pars=par)[[par]]
s2 <- extract(fit_aggregated, pars=par)[[par]]
samplesDF <- rbind(data.frame(par=s, model="not aggregated"),
data.frame(par=s2, model="aggregated"))
print(
ggplot(data=samplesDF) +
geom_histogram(mapping=aes(par, ..density.., fill=model), alpha=.5, position="dodge") +
geom_vline(aes(xintercept = truth_global_for_silly_reasons)) +
ggtitle(paste("posterior for parameter",par,"from both models, with truth"))
)
print(
ggplot(data=samplesDF) +
geom_histogram(mapping=aes(par, ..density..), alpha=.5,position="dodge") +
geom_vline(aes(xintercept = truth_global_for_silly_reasons)) + facet_grid(. ~ model) +
ggtitle(paste("posterior for parameter",par,"from both models, with truth"))
)
}
plot_posteriors_both_models(fits1, "mu_N")
plot_posteriors_both_models <- function(fits, par) {
fake_data <- fits$fake_data
fit <- fits$fit
fit_aggregated <- fits$fit_aggregated
truth_global_for_silly_reasons <<- fake_data[1,par]  #global for silly reasons
s <- extract(fit, pars=par)[[par]]
s2 <- extract(fit_aggregated, pars=par)[[par]]
samplesDF <- rbind(data.frame(par=s, model="not aggregated"),
data.frame(par=s2, model="aggregated"))
print(
ggplot(data=samplesDF) +
geom_histogram(mapping=aes(par, ..density.., fill=model), alpha=.5, position="dodge") +
geom_vline(aes(xintercept = truth_global_for_silly_reasons)) +
ggtitle(paste("posterior for parameter",par,"from both models, with truth"))
)
print(
ggplot(data=samplesDF) +
geom_histogram(mapping=aes(par, ..density..), alpha=.5,position="dodge") +
geom_vline(aes(xintercept = truth_global_for_silly_reasons)) + facet_grid(model ~ .) +
ggtitle(paste("posterior for parameter",par,"from both models, with truth"))
)
}
plot_posteriors_both_models(fits1, "mu_N")
plot_posteriors_both_models(fits1, "sigma_N")
plot_posteriors_both_models(fits1, "sigma_y")
plot_posteriors_both_models <- function(fits, par) {
fake_data <- fits$fake_data
fit <- fits$fit
fit_aggregated <- fits$fit_aggregated
truth_global_for_silly_reasons <<- fake_data[1,par]  #global for silly reasons
s <- extract(fit, pars=par)[[par]]
s2 <- extract(fit_aggregated, pars=par)[[par]]
samplesDF <- rbind(data.frame(par=s, model="not aggregated"),
data.frame(par=s2, model="aggregated"))
print(
ggplot(data=samplesDF) +
geom_histogram(mapping=aes(par, ..density.., fill=model), alpha=.5, position="dodge") +
geom_vline(aes(xintercept = truth_global_for_silly_reasons)) +
ggtitle(paste("posterior for parameter",par,"from both models, with truth"))
)
print(
ggplot(data=samplesDF) +
geom_histogram(mapping=aes(par, ..density..), alpha=.5,position="dodge") +
geom_vline(aes(xintercept = truth_global_for_silly_reasons)) + facet_grid(model ~ ., scales="free_y") +
ggtitle(paste("posterior for",par,"with line truth"))
)
}
plot_posteriors_both_models(fits1, "mu_N")
plot_posteriors_both_models(fits1, "sigma_N")
plot_posteriors_both_models(fits1, "sigma_y")
generate_data_and_fit_both_models <- function(N, N2) {
#Generate fake data and aggregated fake data
fake_data <- generate_data_including_hyperparameters(N)
fake_data$group <- ceiling((fake_data$t)*N2)
fake_data_aggregate <- ddply(fake_data, "group", summarize, t=mean(t), y=mean(y))
# plot with the original fake data and the aggregates
fake_data_plot_with_aggregate <-
fit1 <- stan("chi_square_jumps hierarchical.stan",
data = list(N=N, y=fake_data$y), iter = 2000, chains = 4)
print(fit1)
#add fitted theta's from this model to plot
fake_data$posterior_theta_means <- get_posterior_mean(fit1,pars="theta")[,5]
#fit aggregates model
fit1_aggregated <- stan(fit= fit1, data = list(N=N2, y=fake_data_aggregate$y), iter = 2000, chains = 4)
print(fit1_aggregated)
#add fitted theta's from aggregated model to plot
fake_data_aggregate$poserior_theta_means <- get_posterior_mean(fit1_aggregated,pars="theta")[,5]
plot_no_model <- plot_fake_data(fake_data)  +
geom_point(data=fake_data_aggregate, mapping=aes(x=t,y=y, color="y aggregated"), size=5, alpha=.5) +
ggtitle("one samples: thetas, y's (aggregated and not)")
fake_data_plot_with_aggregate <- plot_no_model +
geom_line(data=fake_data, aes(x=t,y=posterior_theta_means, color="posterior theta means")) +
geom_line(data=fake_data_aggregate, aes(x=t,y=poserior_theta_means, color="posterior theta means from aggregates")) +
ggtitle("true theta's, y's, the posterior theta means for each model")
#return useful stuff
list(fake_data=fake_data,
fake_data_aggregate=fake_data_aggregate,
fit=fit1,
fit_aggregated=fit1_aggregated,
plot=fake_data_plot_with_aggregate,
plot_no_model <- plot_no_model)
}
set.seed(1)
fits1 <- generate_data_and_fit_both_models(10,5)
print(fits1$plot)
print(fits1$plot_no_model)
names(fits1)
generate_data_and_fit_both_models <- function(N, N2) {
#Generate fake data and aggregated fake data
fake_data <- generate_data_including_hyperparameters(N)
fake_data$group <- ceiling((fake_data$t)*N2)
fake_data_aggregate <- ddply(fake_data, "group", summarize, t=mean(t), y=mean(y))
# plot with the original fake data and the aggregates
fake_data_plot_with_aggregate <-
fit1 <- stan("chi_square_jumps hierarchical.stan",
data = list(N=N, y=fake_data$y), iter = 2000, chains = 4)
print(fit1)
#add fitted theta's from this model to plot
fake_data$posterior_theta_means <- get_posterior_mean(fit1,pars="theta")[,5]
#fit aggregates model
fit1_aggregated <- stan(fit= fit1, data = list(N=N2, y=fake_data_aggregate$y), iter = 2000, chains = 4)
print(fit1_aggregated)
#add fitted theta's from aggregated model to plot
fake_data_aggregate$poserior_theta_means <- get_posterior_mean(fit1_aggregated,pars="theta")[,5]
plot_no_model <- plot_fake_data(fake_data)  +
geom_point(data=fake_data_aggregate, mapping=aes(x=t,y=y, color="y aggregated"), size=5, alpha=.5) +
ggtitle("one samples: thetas, y's (aggregated and not)")
fake_data_plot_with_aggregate <- plot_no_model +
geom_line(data=fake_data, aes(x=t,y=posterior_theta_means, color="posterior theta means")) +
geom_line(data=fake_data_aggregate, aes(x=t,y=poserior_theta_means, color="posterior theta means from aggregates")) +
ggtitle("true theta's, y's, the posterior theta means for each model")
#return useful stuff
list(fake_data=fake_data,
fake_data_aggregate=fake_data_aggregate,
fit=fit1,
fit_aggregated=fit1_aggregated,
plot=fake_data_plot_with_aggregate,
plot_no_model = plot_no_model)
}
fits1 <- generate_data_and_fit_both_models(10,5)
print(fits1$plot_no_model)
print(fits1$plot)
print(fits1$plot)
set.seed(7373)
plot_samples(fits1, 20)
?scale_size_discrete
plot_samples <- function(fit, n) {
fit_samples <- samples_from_fit_to_DF(fit$fit, "theta", n)
fit_samples$t <- fit$fake_data$t  #using R's vector recycling feels dirty
fit_aggregated_samples <- samples_from_fit_to_DF(fit$fit_aggregated, "theta", n)
fit_aggregated_samples$t <- fit$fake_data_aggregate$t
fake_data <- fit$fake_data
fake_data$model = "truth"
fake_data$sample_num = "0"
fake_data <- fake_data[,names(fit_samples)]
plot_samples <- ggplot(data=rbind(fit_samples, fit_aggregated_samples, fake_data)) +
geom_line(mapping=aes(x=t, y=theta, group=sample_num,color=model,
size=ifelse(model=="truth","truth","models" )), alpha=1) +
ggtitle("samples from each model (aggregated and unaggregated) posterior theta") +
scale_size_discrete("", range=c(1,2))
plot_samples
}
plot_samples(fits1, 20)
plot_samples <- function(fit, n) {
fit_samples <- samples_from_fit_to_DF(fit$fit, "theta", n)
fit_samples$t <- fit$fake_data$t  #using R's vector recycling feels dirty
fit_aggregated_samples <- samples_from_fit_to_DF(fit$fit_aggregated, "theta", n)
fit_aggregated_samples$t <- fit$fake_data_aggregate$t
fake_data <- fit$fake_data
fake_data$model = "truth"
fake_data$sample_num = "0"
fake_data <- fake_data[,names(fit_samples)]
plot_samples <- ggplot(data=rbind(fit_samples, fit_aggregated_samples, fake_data)) +
geom_line(mapping=aes(x=t, y=theta, group=sample_num,color=model,
size=ifelse(model=="truth","truth","models" )), alpha=1) +
ggtitle("samples from each model (aggregated and unaggregated) posterior theta") +
scale_size_discrete("", range=c(5,10))
plot_samples
}
plot_samples(fits1, 20)
plot_samples <- function(fit, n) {
fit_samples <- samples_from_fit_to_DF(fit$fit, "theta", n)
fit_samples$t <- fit$fake_data$t  #using R's vector recycling feels dirty
fit_aggregated_samples <- samples_from_fit_to_DF(fit$fit_aggregated, "theta", n)
fit_aggregated_samples$t <- fit$fake_data_aggregate$t
fake_data <- fit$fake_data
fake_data$model = "truth"
fake_data$sample_num = "0"
fake_data <- fake_data[,names(fit_samples)]
plot_samples <- ggplot(data=rbind(fit_samples, fit_aggregated_samples, fake_data)) +
geom_line(mapping=aes(x=t, y=theta, group=sample_num,color=model,
size=ifelse(model=="truth","truth","models" )), alpha=1) +
ggtitle("samples from each model (aggregated and unaggregated) posterior theta") +
scale_size_discrete("", range=c(.5,2))
plot_samples
}
plot_samples(fits1, 20)
?scale_color_discrete
plot_samples <- function(fit, n) {
fit_samples <- samples_from_fit_to_DF(fit$fit, "theta", n)
fit_samples$t <- fit$fake_data$t  #using R's vector recycling feels dirty
fit_aggregated_samples <- samples_from_fit_to_DF(fit$fit_aggregated, "theta", n)
fit_aggregated_samples$t <- fit$fake_data_aggregate$t
fake_data <- fit$fake_data
fake_data$model = "truth"
fake_data$sample_num = "0"
fake_data <- fake_data[,names(fit_samples)]
sampleDFs <- rbind(fit_samples, fit_aggregated_samples)
sampleDFs$model <- ifelse(sampleDFs$model=="fit$fit", "original data", "aggregated data")
sampleDFs <- rbind(sampleDFs, fake_data)
plot_samples <- ggplot(data=sampleDFs) +
geom_line(mapping=aes(x=t, y=theta, group=sample_num,color=model,
size=ifelse(model=="truth","truth","models" )), alpha=1) +
ggtitle("samples from each model (aggregated and unaggregated) posterior theta") +
scale_size_discrete("", range=c(.5,2)) +
scale_color_discrete
plot_samples
}
plot_samples(fits1, 20)
plot_samples <- function(fit, n) {
fit_samples <- samples_from_fit_to_DF(fit$fit, "theta", n)
fit_samples$t <- fit$fake_data$t  #using R's vector recycling feels dirty
fit_aggregated_samples <- samples_from_fit_to_DF(fit$fit_aggregated, "theta", n)
fit_aggregated_samples$t <- fit$fake_data_aggregate$t
fake_data <- fit$fake_data
fake_data$model = "truth"
fake_data$sample_num = "0"
fake_data <- fake_data[,names(fit_samples)]
sampleDFs <- rbind(fit_samples, fit_aggregated_samples)
sampleDFs$model <- ifelse(sampleDFs$model=="fit$fit", "original data", "aggregated data")
sampleDFs <- rbind(sampleDFs, fake_data)
plot_samples <- ggplot(data=sampleDFs) +
geom_line(mapping=aes(x=t, y=theta, group=sample_num,color=model,
size=ifelse(model=="truth","truth","models" )), alpha=1) +
ggtitle("samples from each model (aggregated and unaggregated) posterior theta") +
scale_size_discrete("", range=c(.5,2))
plot_samples
}
plot_samples(fits1, 20)
